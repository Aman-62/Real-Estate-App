import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}
// created by chatgpt
export function areBase64Images(imagesData: string[]): boolean {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;

  for (const imageData of imagesData) {
    if (!base64Regex.test(imageData)) {
      return false; // If any element is not a valid base64 image, return false.
    }
  }

  return true; // All elements are valid base64 images.
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

// created by chatgpt
export function formatIndianPrice(price: number | string): string {
  // Convert the price to a number if it's a string
  if (typeof price === "string") {
    price = parseFloat(price);
  }

  // Check if the price is a valid number
  if (isNaN(price)) {
    return "Invalid Price";
  }

  // Format the price with Indian numbering and commas
  const formattedPrice = price.toLocaleString("en-IN");

  return formattedPrice;
}

export function shortenPropertyTitle(
  title: string,
  maxLength: number = 15
): string {
  if (title.length <= maxLength) {
    return title;
  }

  // Shorten the title and add an ellipsis at the end
  const shortenedTitle = title.substring(0, maxLength) + "...";

  return shortenedTitle;
}
